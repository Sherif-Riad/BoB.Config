//used by header buttons to set the div state as well as the button text
function SHfuntion(loc) {
    var select = document.getElementById(loc);
    var but = document.getElementById(loc.concat("button"));
    if (select.style.display === "none") {
        select.style.display = "block";
        but.textContent = "Hide".concat(but.textContent.slice(4));
    } else {
        select.style.display = "none";
        but.textContent = "Show".concat(but.textContent.slice(4));
    }
}
//used by any checkbox that needs to hide another entry. check the checkbox state before using the value that the checkbox modifies
function SHSubSection(loc) {
    var select = document.getElementById(loc);
    if (select.style.display === "none") {
        select.style.display = "block";
    } else {
        select.style.display = "none";
    }
}
//used by the toggle on the dino screen to set the header for the list
function HLToggle() {
    var Tname = document.getElementById("dinoh");
    if (Tname.textContent === "Absolute Group limit") {
        Tname.textContent = "Soft Limit";
    } else {
        Tname.textContent = "Absolute Group limit";
    }
}
//used to build and destroy the rank level lines. passes values over to the command and player configuration
function RankRemoveRow(oButton) {
    var tabRanks = document.getElementById("Ranks");
    var selections = document.getElementsByName("Ranks");//grabs all selects that use this list
    var rIndex = oButton.parentNode.parentNode.rowIndex;//the indexs match thanks to the blank space used as a placeholder of the rows
    tabRanks.deleteRow(rIndex);
    for (var select in selections) {
        selections[select].remove(rIndex);
    }
}
function RankAddRow(oButton) {
    var tab = document.getElementById("Ranks");
    var selections = document.getElementsByName("Ranks");
    var loc = oButton.parentNode.parentNode.rowIndex + 1;
    var row = tab.insertRow(loc);
    var cell0 = row.insertCell(0);//you have to define all the cells to variables before modifying them, else it will fail to populate the cells
    var cell1 = row.insertCell(1);
    var cell2 = row.insertCell(2);
    var cell3 = row.insertCell(3);
    cell0.innerHTML = '<input type="text" value="UnnamedRank" onchange="updatename(this)">';
    cell1.innerHTML = '<input type="number" value="1" step= 1 onwheel="this.blur()">';
    cell2.innerHTML = '<input type="button" value="X" onclick="RankRemoveRow(this)">';
    cell3.innerHTML = '<input type="button" value="+" onclick="RankAddRow(this)">';
    var opt = document.createElement("option");
    opt.innerHTML = "UnnamedRank";
    opt.value = "UnnamedRank";
     for(var select in selections){
         selections[select].add(opt.cloneNode(true),loc);
     }
         
}
function updatename(oText) {
    var loc = oText.parentNode.parentNode.rowIndex;
    var selections = document.getElementsByName("Ranks");
    for(var select in selections){
         selections[select].options[loc].value = oText.value;
         selections[select].options[loc].innerHTML = oText.value;
     }
}
//used to build and destroy the lines of the staff chart
function StaffRemoveRow(oButton) {
    var tab = document.getElementById("staff");
    tab.deleteRow(oButton.parentNode.parentNode.rowIndex);
}
function StaffAddRow(oButton) {
    var tab = document.getElementById("staff");
    var loc = oButton.parentNode.parentNode.rowIndex + 1;
    var row = tab.insertRow(loc);
    var cell0 = row.insertCell(0);//you have to define all the cells to variables before modifying them, else it will fail to populate the cells
    var cell1 = row.insertCell(1);
    var cell2 = row.insertCell(2);
    var cell3 = row.insertCell(3);
    var cell4 = row.insertCell(4);
    var cell5 = row.insertCell(5);
    var cell6 = row.insertCell(6);
    cell0.innerHTML = '<input type="number" value="" onchange="validateid(this)" onwheel="this.blur()">';
    cell1.innerHTML = setlist();
    cell2.innerHTML = '<input type="text" value="">';
    cell3.innerHTML = '<input type="color" value="#ffffff" onchange="ValidateColor(this)">';
    cell4.innerHTML = '<input type = "text" pattern="^#+([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$" onchange ="ValidateColor(this)" size=7 maxlength="7" value="#ffffff" style="vertical-align: middle">'
    cell5.innerHTML = '<input type="button" value="X" onclick="StaffRemoveRow(this)">';
    cell6.innerHTML = '<input type="button" value="+" onclick="StaffAddRow(this)">';
}
//used by any dropdown that needs to build based on the permissions table generated by the user
function setlist() {
    var tab = document.getElementById("Ranks").getElementsByTagName('tbody')[0];
    var aData = [' ']//this pushes a blank entry at the beginning of the list. allows us to select the blank when something needs it
    var fragment = document.createDocumentFragment();//collects all entries into a fragment to not cause Dom update spam when having a large number of ranks defined
    for (var t in tab.rows) {
        if( t == "length") {break;}//because chrome for is dumb and adds extra data to the end of the array, starting with length
        var da = tab.rows[t].cells[0].firstChild.value;
        if(da != undefined) {//gets rid of the undefined that is grabbed from the header row
            aData.push(da);
        }
    }
    aData.forEach(function(aData,index) {
        var opt = document.createElement("option");
        opt.innerHTML = aData;
        opt.value = aData;
        fragment.appendChild(opt);
    })
    var div = document.createElement('div');//hack to turn a fragment into a string
    div.appendChild(fragment.cloneNode(true));
    return '<select name="Ranks">'+div.innerHTML+'</select>';
}

function validateid(id) {
    if(id.value.length !== 17 || BigInt(id.value) < 76561197960265729n || BigInt(id.value) > 76561202255233023n ) {//javascript limitation of comparing 64 bit numbers is very blatent here... also this is both the absolute min and max steam id possible
        id.style.backgroundColor = '#f66';//light red
    } else {
        id.style.backgroundColor = '#fff';
    }
}
function ValidateColor(colorbutton) {
    var pcolor = colorbutton.value;
    var r = "0x00";
    var g = "0x00";
    var b = "0x00";
    if (pcolor.length == 4) {//takes care of splitting the hex to its RGB componets, while also taking care of user input when they input a hex value
        r = "0x" + pcolor[1] + pcolor[1];
        g = "0x" + pcolor[2] + pcolor[2];
        b = "0x" + pcolor[3] + pcolor[3];
    } else if (pcolor.length == 7) {
        r = "0x" + pcolor[1] + pcolor[2];
        g = "0x" + pcolor[3] + pcolor[4];
        b = "0x" + pcolor[5] + pcolor[6];
    }
     var cr = Math.floor(parseFloat(+(r / 255).toFixed(1))*255);
     var cg = Math.floor(parseFloat(+(g / 255).toFixed(1))*255);
     var cb = Math.floor(parseFloat(+(b / 255).toFixed(1))*255);
    colorbutton.parentElement.parentElement.cells[3].firstChild.value = "#" + ((1 << 24) + (cr << 16) + (cg << 8) + cb).toString(16).slice(1);
    colorbutton.parentElement.parentElement.cells[4].firstChild.value = "#" + ((1 << 24) + (cr << 16) + (cg << 8) + cb).toString(16).slice(1);
}